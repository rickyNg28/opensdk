
plugins {
    id 'com.android.library' version '8.0.2'
}

ext {
    minSdkVersion = 24
    compileSdkVersion = 33
    targetSdkVersion = 31
    buildToolsVersion = "31.0.0"
    javaVersion = JavaVersion.VERSION_1_8
    abiFilters = "armeabi-v7a,arm64-v8a"
    localTest = false
    isMasterPkg = true
    hackJarName = "hack.jar"
    versionCode = 100
    versionName = "1.0.0"
    masterPkg = "com.hack.opensdk"
    assistPkg = "com.hack.opensdk.assist"
}

android {
    namespace 'com.hack.opensdk'

    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        consumerProguardFiles "consumer-rules.pro"
        buildConfigField "boolean", "localTest", "${rootProject.ext.localTest}"
        buildConfigField "boolean", "isMasterPkg", "${rootProject.ext.isMasterPkg}"

        buildConfigField "String", "ENGINE_JAR_NAME", "\"${rootProject.ext.hackJarName}\""
        buildConfigField "String", "ASSIST_PACKAGE", "\"$rootProject.ext.assistPkg\""
        buildConfigField "String", "MASTER_PACKAGE", "\"$rootProject.ext.masterPkg\""

        if (!rootProject.ext.isMasterPkg) {
            manifestPlaceholders = [masterPkg: "${rootProject.ext.masterPkg}"]
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src', "${projectDir}/build/src/main/java"]

            if (rootProject.ext.isMasterPkg) {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest_assist.xml'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }

    afterEvaluate {
        task generateConstantJavaFile(type: Exec) {
            File source = new File("${projectDir}/resources/java/com/hack/opensdk/CmdConstants.java")
            File destDir = new File("${projectDir}/build/src/main/java/com/hack/opensdk")
            destDir.mkdirs()
            copy {
                from source
                into destDir
            }
        }

        generateConstantJavaFile
    }
    lintOptions {
        checkReleaseBuilds true
        quiet true
        abortOnError false
        ignoreWarnings true
        textOutput "stdout"
        textReport false
        disable "UnusedResources", 'RestrictedApi'
        disable 'TypographyFractions', 'TypographyQuotes'
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        check 'NewApi', 'InlinedApi'
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    options.encoding = "UTF-8"
}